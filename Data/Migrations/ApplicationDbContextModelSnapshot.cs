// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using viafront3.Data;

namespace viafront3.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("viafront3.Data.TripwireEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset?>("Date");

                    b.Property<string>("RemoteIpAddress");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("TripwireEvents");
                });

            modelBuilder.Entity("viafront3.Models.AccountCreationRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId");

                    b.Property<bool>("Completed");

                    b.Property<long>("Date");

                    b.Property<string>("RequestedDeviceName");

                    b.Property<string>("RequestedEmail");

                    b.Property<string>("Secret");

                    b.Property<string>("Token");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.ToTable("AccountCreationRequests");
                });

            modelBuilder.Entity("viafront3.Models.ApiKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccountCreationRequestId");

                    b.Property<int>("ApiKeyCreationRequestId");

                    b.Property<string>("ApplicationUserId");

                    b.Property<string>("Key");

                    b.Property<string>("Name");

                    b.Property<long>("Nonce");

                    b.Property<string>("Secret");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.ToTable("ApiKeys");
                });

            modelBuilder.Entity("viafront3.Models.ApiKeyCreationRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId");

                    b.Property<bool>("Completed");

                    b.Property<long>("Date");

                    b.Property<string>("RequestedDeviceName");

                    b.Property<string>("Secret");

                    b.Property<string>("Token");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.ToTable("ApiKeyCreationRequests");
                });

            modelBuilder.Entity("viafront3.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("viafront3.Models.AuthenticationTicket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset?>("Expires");

                    b.Property<DateTimeOffset?>("LastActivity");

                    b.Property<string>("OperatingSystem");

                    b.Property<string>("RemoteIpAddress");

                    b.Property<string>("UserAgentFamily");

                    b.Property<string>("UserAgentVersion");

                    b.Property<string>("UserId");

                    b.Property<byte[]>("Value");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AuthenticationTickets");
                });

            modelBuilder.Entity("viafront3.Models.BrokerOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("AmountReceive");

                    b.Property<decimal>("AmountSend");

                    b.Property<string>("ApplicationUserId");

                    b.Property<string>("AssetReceive");

                    b.Property<string>("AssetSend");

                    b.Property<long>("Date");

                    b.Property<long>("Expiry");

                    b.Property<decimal>("Fee");

                    b.Property<string>("InvoiceId");

                    b.Property<string>("Market");

                    b.Property<string>("PaymentAddress");

                    b.Property<string>("PaymentUrl");

                    b.Property<decimal>("Price");

                    b.Property<string>("Recipient");

                    b.Property<int>("Side");

                    b.Property<string>("Status");

                    b.Property<string>("Token");

                    b.Property<string>("TxIdPayment");

                    b.Property<string>("TxIdRecipient");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId")
                        .IsUnique();

                    b.HasIndex("Token")
                        .IsUnique();

                    b.ToTable("BrokerOrders");
                });

            modelBuilder.Entity("viafront3.Models.BrokerOrderChainWithdrawal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BrokerOrderId");

                    b.Property<string>("SpendCode");

                    b.HasKey("Id");

                    b.HasIndex("BrokerOrderId")
                        .IsUnique();

                    b.HasIndex("SpendCode")
                        .IsUnique();

                    b.ToTable("BrokerOrderChainWithdrawals");
                });

            modelBuilder.Entity("viafront3.Models.BrokerOrderFiatWithdrawal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BrokerOrderId");

                    b.Property<string>("DepositCode");

                    b.HasKey("Id");

                    b.HasIndex("BrokerOrderId")
                        .IsUnique();

                    b.HasIndex("DepositCode")
                        .IsUnique();

                    b.ToTable("BrokerOrderFiatWithdrawals");
                });

            modelBuilder.Entity("viafront3.Models.Exchange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("Exchange");
                });

            modelBuilder.Entity("viafront3.Models.Kyc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId");

                    b.Property<int>("Level");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("Kycs");
                });

            modelBuilder.Entity("viafront3.Models.KycRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId");

                    b.Property<long>("Date");

                    b.Property<string>("Token");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.ToTable("KycRequests");
                });

            modelBuilder.Entity("viafront3.Models.Withdrawal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Amount");

                    b.Property<string>("ApplicationUserId");

                    b.Property<string>("Asset");

                    b.Property<long>("Date");

                    b.Property<string>("WithdrawalAssetEquivalent");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Withdrawals");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("viafront3.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("viafront3.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("viafront3.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("viafront3.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("viafront3.Models.ApiKey", b =>
                {
                    b.HasOne("viafront3.Models.ApplicationUser")
                        .WithMany("ApiKeys")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("viafront3.Models.AuthenticationTicket", b =>
                {
                    b.HasOne("viafront3.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("viafront3.Models.Exchange", b =>
                {
                    b.HasOne("viafront3.Models.ApplicationUser")
                        .WithOne("Exchange")
                        .HasForeignKey("viafront3.Models.Exchange", "ApplicationUserId");
                });

            modelBuilder.Entity("viafront3.Models.Kyc", b =>
                {
                    b.HasOne("viafront3.Models.ApplicationUser")
                        .WithOne("Kyc")
                        .HasForeignKey("viafront3.Models.Kyc", "ApplicationUserId");
                });

            modelBuilder.Entity("viafront3.Models.Withdrawal", b =>
                {
                    b.HasOne("viafront3.Models.ApplicationUser")
                        .WithMany("Withdrawals")
                        .HasForeignKey("ApplicationUserId");
                });
#pragma warning restore 612, 618
        }
    }
}
